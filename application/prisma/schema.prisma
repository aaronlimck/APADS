// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  isArchived Boolean  @default(false)

  department     Department @relation("DepartmentStaff", fields: [departmentName], references: [name])
  departmentName String

  goals      Goal[]
  appraisals AppraisalForm[] // Define the relationship from User to AppraisalForm

  @@index([email])
  @@map("users")
}

model Goal {
  id          String @id @default(cuid())
  description String
  user        User   @relation(fields: [userId], references: [id])
  userId      String
}

model Department {
  name String @unique
  user User[] @relation("DepartmentStaff")

  @@index([name])
}

model AppraisalForm {
  id           String  @id @default(cuid())
  name         String
  description  String?
  content      String  @default("[]")
  isPublished  Boolean @default(false)
  recipientsId User[]

  createdAt            DateTime               @default(now())
  appraisalSubmissions AppraisalSubmissions[]
}

model AppraisalSubmissions {
  id                 String   @id @default(cuid())
  content            String
  createdAt          DateTime @default(now())
  formId             String
  employeeId         String
  hasManagerAppraise Boolean  @default(false)

  appraisal AppraisalForm @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formId, employeeId])
}

model Template {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  content     String       @default("[]")
  automation  Automation[]
  createdAt   DateTime     @default(now())
}

model Automation {
  id          String   @id @default(cuid())
  name        String
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  startDate   DateTime
  frequency   String
  recipientId String[] @default([])

  @@unique([name])
}
